#!/usr/bin/env ruby

require 'bundler/setup'

require 'optparse'
require 'methadone'

# Support coverage
require 'support/setup-coverage' if ENV['LDAP_SYNC_ENV'] == 'test'

require 'conjur/ldap/sync.rb'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do
    Conjur::Ldap::Sync.run_sync options
  end


  version Conjur::Ldap::Sync::VERSION
  description "Synchronize Conjur with an external LDAP database"

  use_log_level_option

  options[:save_api_keys] = false
  options[:import_uid_numbers] = true
  options[:import_gid_numbers] = true
  options[:prefix] = ENV['CONJUR_LDAP_SYNC_PREFIX']
  options[:bind_password] = ENV['CONJUR_LDAP_PASSWORD']
  options[:format] = :json
  options[:mode] = :posix
  options[:username] = :cn

  on '--username ATTR', [:cn,:sAMAccountName],
     'Use this attribute rather than CN for user name collection'

  on '--format FORMAT', [:text,:json],
     'Output format for reporting (text, json)'

  on '--mode MODE', [:posix,:active_directory],
     'Flavor of LDAP to expect from the server (posix, active_directory)'


  on '--owner OWNER', 'Role that will own all groups, users, and variables created'

  on('--save-api-keys', 'When present, passwords will be saved to variables'){ options[:save_api_keys] = true}

  on('--bind-dn DN', 'Bind DN for the LDAP server'){|val| options[:bind_dn] = val}

  on('--bind-password PASS','Bind password for the LDAP server'){|val| options[:bind_password] = val}

  on '--no-ldap-ids', "Don't import LDAP uids or gids (deprecated)" do
    options[:import_uid_numbers] = options[:import_gid_numbers] = false
  end

  on '--[no-]import-uid-numbers', 'Whether uid numbers should be imported from LDAP (true)' do |flag|
    options[:import_uid_numbers] = flag
  end

  on '--[no-]import-gid-numbers', 'Whether gid numbers should be imported from LDAP (true)' do |flag|
    options[:import_gid_numbers] = flag
  end


  on('--group-object-classes CLASS1,CLASS2,...', Array,
     'LDAP objectClasses that should be imported as groups') do |ocs|
    options[:group_object_classes] = ocs
  end

  on('--user-object-classes CLASS1,CLASS2,...', Array,
     'LDAP objectClasses that should be imported as users') do |ocs|
    options[:user_object_classes] = ocs
  end

  on('--group-filter FILTER',
      'LDAP filter to select groups for import (overrides --group-object-classes)') do |filter|
    options[:group_filter] = filter
  end

  on('--user-filter FILTER',
      'LDAP filter to select users for import (overrides --user-object-classes') do |filter|
    options[:user_filter] = filter
  end

  on '--source-tag TAG',
      'Annotation added to assets imported from ldap.' do |tag|
    options[:marker_tag] = tag
  end

  go!
end
